// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// generator typegraphql {
//   provider = "typegraphql-prisma"
//   output   = "../generated/type-graphql" // Set the output to a directory outside node_modules
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Goal {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  title        String
  technologies Technology[]
}

model Technology {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  topics    Topic[]
  goal      Goal?    @relation(fields: [goalId], references: [id])
  goalId    String?

  userInterests UserInterest[]
}

model Topic {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  technology    Technology?    @relation(fields: [technologyId], references: [id])
  technologyId  String?
  blogs         Blog[]
  tags          Tag[]
  userInterests UserInterest[]
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String

  topic   Topic?        @relation(fields: [topicId], references: [id])
  topicId String?
  blogs   TagsOnBlogs[]
}

model User {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  role      UserRole       @default(LEARNER)
  name      String
  blogs     Blog[]
  email     String         @unique
  image     String
  interests UserInterest[]
}

model UserInterest {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  technologyId String?
  technology   Technology? @relation(fields: [technologyId], references: [id])

  topicId String?
  topic   Topic?  @relation(fields: [topicId], references: [id])

  interestType InterestType //field to determine the type of interest (technology or topic)
}

enum InterestType {
  TECHNOLOGY
  TOPIC
}

model Blog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topic             Topic?        @relation(fields: [topicId], references: [id])
  topicId           String?
  tags              TagsOnBlogs[]
  author            User?         @relation(fields: [authorId], references: [id])
  authorId          String?
  title             String
  // 
  skillLevel        SkillLevel    @default(INTERMEDIATE)
  content           BlogContent? 
  description       String?
  slug              String        @unique // for sharable url
  views             Int           @default(0)
  readTimeInMinutes Int?
  Video             Video?

  @@unique([topicId, title]) // Ensure unique title for each topic
}

model BlogContent {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fullContent    Json
  intro          Json?
  implementation Json?
  advanced       Json?
  blog           Blog   @relation(fields: [blogId], references: [id] , onDelete: Cascade) 
  blogId         String @unique
}

model Video {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String   @unique

  videoLink     String
  thumbnailLink String
  sections      VideoSection[]
}

model VideoSection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Video     Video    @relation(fields: [videoId], references: [id])
  videoId   String

  blogSectionTitle   String
  timestampInSeconds Int // Timestamp in seconds where this heading corresponds in the video
  blogPart           BlogPart

  @@unique([blogSectionTitle, blogPart]) //each video section title can only be mapped to one timeline for a given part of the blog
}

enum BlogPart {
  INTRO
  IMPLEMENTATION
  ADVANCED
}

model TagsOnBlogs {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String
  blog   Blog   @relation(fields: [blogId], references: [id] , onDelete: Cascade)
  blogId String

  @@unique([blogId, tagId]) // a blog can't have the same tag twice
}

enum SkillLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum UserRole {
  LEARNER
  AUTHOR
  ADMIN
}
