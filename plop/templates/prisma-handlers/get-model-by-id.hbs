"use server";

import { Response } from "@/server-actions/types/response";
import { {{pascalCase model}}Service } from "@/services/prisma/{{kebab-case model}}/{{kebab-case model}}-service";import prisma from "@/shared/lib/prisma";
import { IdSchema } from "@/server-actions/utils/zod";
import {
  failure,
  failureWithFieldErrors,
} from "@/server-actions/utils/response";

export const get{{pascalCase model}}ByIdHandler = async (
  id: string
): Promise<
  Response<
    Awaited<ReturnType<{{pascalCase model}}Service["get{{pascalCase model}}ById"]>>
  >
> => {
  try {
    const { data: validatedId, error } = IdSchema.safeParse(id);
    if (error)
      return failure("Invalid ID format");
    const {{camelCase model}}Service = new {{pascalCase model}}Service(prisma);
    return { success: true, data: await {{camelCase model}}Service.get{{pascalCase model}}ById(validatedId) };
  } catch (error) {
    if(error instanceof FieldsError)return failureWithFieldErrors(error);
    return failure(error);
  }
};

// End of handler