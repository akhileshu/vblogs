import type { Prisma, PrismaClient ,{{pascalCase model}} } from "@prisma/client";
import { BaseService } from "./../base-service";

import { create{{pascalCase model}} } from "./create-{{kebab-case model}}";
import { get{{pascalCase model}}ById } from "./get-{{kebab-case model}}-by-id";
import { update{{pascalCase model}} } from "./update-{{kebab-case model}}";
import { delete{{pascalCase model}} } from "./delete-{{kebab-case model}}";
import { getAll{{pascalCase model}}s } from "./get-all-{{kebab-case model}}s";

interface {{pascalCase model}}Service {
  create{{pascalCase model}}(data: Prisma.{{pascalCase model}}CreateInput): Promise<{{pascalCase model}}>;
  get{{pascalCase model}}ById(id: string): Promise<{{pascalCase model}} | null>;
  update{{pascalCase model}}(id: string, data: Prisma.{{pascalCase model}}UpdateInput): Promise<{{pascalCase model}}>;
  delete{{pascalCase model}}(id: string): Promise<{{pascalCase model}}>;
  getAll{{pascalCase model}}s(): Promise<{{pascalCase model}}[]>;
}

export type {{pascalCase model}}ServiceReturnType<T extends keyof {{pascalCase model}}Service> = Awaited<
  ReturnType<{{pascalCase model}}Service[T]>
>;

export class {{pascalCase model}}ServiceImplementation extends BaseService implements {{pascalCase model}}Service {
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async create{{pascalCase model}}(data: Prisma.{{pascalCase model}}CreateInput) {
    const result = await create{{pascalCase model}}(this.prisma, data);
    return result;
  }

  async get{{pascalCase model}}ById(id: string) {
    const result = await get{{pascalCase model}}ById(this.prisma, id);
    return result;
  }

  async update{{pascalCase model}}(id: string, data: Prisma.{{pascalCase model}}UpdateInput) {
    const result = await update{{pascalCase model}}(this.prisma, id, data);
    return result;
  }

  async delete{{pascalCase model}}(id: string) {
    const result = await delete{{pascalCase model}}(this.prisma, id);
    return result;
  }

  async getAll{{pascalCase model}}s() {
    const result = await getAll{{pascalCase model}}s(this.prisma);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to {{pascalCase model}}Service
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to {{pascalCase model}}Service
  }
}



