[2/1/2025, 8:59:46 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 8:59:51 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:02:13 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:02:17 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:02:23 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:02:27 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:04:06 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:04:10 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:04:29 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:04:33 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:04:37 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:04:42 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:06:57 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:07:02 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:07:24 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:07:29 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:08:27 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:08:32 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:08:43 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:08:48 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:10:03 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:10:07 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:10:25 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:10:29 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:10:32 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:10:34 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:10:37 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:10:38 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:10:59 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:11:13 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:11:20 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:11:24 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:11:38 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:11:45 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:11:50 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:12:00 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:12:05 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:14:14 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:14:19 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:14:24 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:14:28 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:14:33 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:14:38 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:14:42 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:14:53 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:14:58 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:17:34 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:17:38 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:17:46 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:37:45 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:39:25 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:39:29 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:39:57 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:40:01 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:40:14 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:59:19 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:59:22 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:59:24 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:59:35 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 9:59:40 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 10:02:54 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 10:02:58 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 10:15:27 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 10:15:32 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 10:22:34 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 10:22:38 am] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:02:24 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:02:29 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:50:32 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:50:38 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:50:42 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:53:12 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:53:16 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:55:43 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:55:43 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 3:55:44 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:55:44 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 3:56:05 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[2/1/2025, 3:56:05 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2024-12-27T09:35:02.195Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[2/1/2025, 3:56:27 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[2/1/2025, 3:56:27 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2024-12-27T09:35:02.195Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[2/1/2025, 3:56:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[2/1/2025, 3:56:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2024-12-27T09:35:02.195Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[2/1/2025, 3:57:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[2/1/2025, 3:57:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2024-12-27T09:35:02.195Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[2/1/2025, 3:58:32 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[2/1/2025, 3:58:32 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2024-12-27T09:35:02.195Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[2/1/2025, 3:58:33 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[2/1/2025, 3:58:33 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2024-12-27T09:35:02.195Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[2/1/2025, 3:58:33 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[2/1/2025, 3:58:33 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2024-12-27T09:35:02.195Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[2/1/2025, 3:58:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[2/1/2025, 3:58:34 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2024-12-27T09:35:02.195Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[2/1/2025, 3:58:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[2/1/2025, 3:58:34 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2024-12-27T09:35:02.195Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[2/1/2025, 3:58:47 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[2/1/2025, 3:58:47 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:44.181Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[2/1/2025, 3:59:01 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[2/1/2025, 3:59:01 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[2/1/2025, 3:59:50 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:59:50 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 3:59:51 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:59:51 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 3:59:56 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:59:56 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 3:59:57 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 3:59:57 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 4:00:24 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 4:00:24 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 4:00:24 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 4:00:24 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 4:00:25 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 4:00:25 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 4:00:26 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 4:00:26 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 4:05:25 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 4:05:25 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 4:05:27 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 4:05:27 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 4:05:27 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 4:05:27 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 4:05:28 pm] [BaseService] Action: [Before getAll], Payload: null
[2/1/2025, 4:05:28 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[2/1/2025, 4:06:37 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "how-to-become-a-10x-dev"
[2/1/2025, 4:06:37 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"adc572a6-86f1-45fb-a0a0-1d319dc129d2","createdAt":"2025-01-02T10:36:15.416Z","updatedAt":"2025-01-02T10:36:15.416Z","fullContent":[{"id":"h1nodejs-a-js-runtime-environment","type":"heading-one","children":[{"text":"h1-nodejs- a js runtime environment"}]},{"id":"h2fs-module","type":"heading-two","children":[{"text":"h2-fs module"}]},{"id":"h3create-a-file-in-nextjs","type":"heading-three","children":[{"text":"h3-create a file in nextjs"}]},{"id":"h2os-module","type":"heading-two","children":[{"text":"h2-os module"}]},{"id":"h2multi-threading","type":"heading-two","children":[{"text":"h2-multi threading"}]},{"id":"h3why-multi-threading-is-important","type":"heading-three","children":[{"text":"h3-why multi threading is important"}]},{"type":"code-block","children":[{"type":"code-line","children":[{"text":"// you can now write your own blog"}]},{"type":"code-line","children":[{"text":"const initialValue = ["}]},{"type":"code-line","children":[{"text":"  {"}]},{"type":"code-line","children":[{"text":"    type: 'paragraph',"}]},{"type":"code-line","children":[{"text":"    children: [{ text: 'A line of text in a paragraph.' }]"}]},{"type":"code-line","children":[{"text":"  }"}]},{"type":"code-line","children":[{"text":"]"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"const App = () => {"}]},{"type":"code-line","children":[{"text":"  const [editor] = useState(() => withReact(createEditor()))"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"  return ("}]},{"type":"code-line","children":[{"text":"    <Slate editor={editor} initialValue={initialValue}>"}]},{"type":"code-line","children":[{"text":"      <Editable />"}]},{"type":"code-line","children":[{"text":"    </Slate>"}]},{"type":"code-line","children":[{"text":"  )"}]},{"type":"code-line","children":[{"text":"}"}]}],"language":"jsx"},{"type":"paragraph","children":[{"text":"This is editable "},{"bold":true,"text":"rich"},{"text":" text, "},{"text":"much","italic":true},{"text":" better than a "},{"code":true,"text":"<textarea>"},{"text":"!"}]},{"type":"paragraph","children":[{"text":"Since it's rich text, you can do things like turn a selection of text "},{"bold":true,"text":"bold"},{"text":", or add a semantically rendered block quote in the middle of the page, like this:"}]},{"type":"block-quote","children":[{"text":"A wise quote."}]},{"type":"paragraph","align":"center","children":[{"text":"Try it out for yourself!"}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"8e00cecc-fd1c-4eab-8856-ddacc6ad2301"}
[3/1/2025, 4:51:33 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:51:33 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:51:34 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:51:34 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:51:37 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:51:37 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:51:37 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:51:37 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:55:31 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:55:31 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:55:32 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:55:32 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:55:32 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:55:32 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:55:32 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:55:32 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:59:28 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:59:28 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:59:28 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:59:28 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:59:28 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:59:28 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:59:29 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:59:29 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:02:17 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:02:17 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:02:17 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:02:17 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:02:17 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:02:17 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:02:18 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:02:18 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:03:44 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:03:44 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:03:44 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:03:44 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:03:45 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:03:45 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:03:45 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:03:45 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:04:06 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:04:06 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:04:06 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:04:06 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:04:06 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:04:06 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:04:07 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:04:07 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:11:25 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:11:26 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:11:26 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:11:26 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:11:26 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:11:26 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:11:27 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:11:27 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:17:35 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:17:36 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:17:36 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:17:36 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:17:37 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:17:37 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:17:37 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:17:37 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:19:47 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:19:47 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:19:47 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:19:47 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:19:47 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:19:47 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:19:47 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:19:47 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:20:24 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:20:24 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:20:24 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:20:24 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:20:24 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:20:24 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:20:25 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:20:25 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:23:19 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:23:19 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:23:19 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:23:19 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:23:19 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:23:19 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:23:20 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:23:20 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:29:32 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:29:33 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:29:33 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:29:33 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:29:33 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:29:33 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:29:34 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:29:34 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:30:07 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:30:07 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:30:08 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:30:08 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:30:08 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:30:08 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 5:30:08 am] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 5:30:08 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:27:07 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:27:12 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:27:19 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:27:27 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:27:32 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:27:54 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:27:54 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:27:54 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:27:54 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:29:39 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:29:39 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:29:40 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:29:40 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:30:17 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:30:17 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:30:18 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:30:18 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:31:20 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:31:20 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:31:22 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:31:23 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:31:34 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:31:34 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:31:34 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:31:34 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:31:44 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:31:44 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:31:45 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:31:45 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:32:22 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:32:22 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:32:22 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:32:22 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:32:45 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:32:45 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:32:46 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:32:46 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:33:51 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:33:51 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:33:51 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:33:51 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:34:07 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:34:07 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:34:08 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:34:08 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:34:18 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:34:18 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:34:19 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:34:19 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:34:27 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:34:27 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:34:29 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:34:29 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:34:39 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:34:39 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:34:39 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:34:39 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:35:10 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:35:10 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:35:10 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:35:10 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:36:19 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:36:19 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:36:21 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:36:21 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:36:31 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:36:31 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:36:32 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:36:32 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:36:52 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:36:52 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:36:52 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:36:52 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:37:08 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:37:09 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:37:09 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:37:09 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:38:54 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:38:54 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:38:55 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:38:55 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:39:14 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:39:14 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:39:14 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:39:15 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:39:28 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:39:28 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:39:29 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:39:29 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:39:39 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:39:39 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:39:41 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:39:41 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:39:53 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:39:53 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:39:53 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:39:53 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:44:12 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:44:12 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:44:12 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:44:12 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:49:22 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:49:22 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:49:24 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:49:24 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:52:27 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:52:27 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:52:29 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:52:29 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:53:01 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:53:01 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:53:03 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:53:03 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:54:16 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:54:16 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:54:22 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:54:22 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:54:24 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:54:24 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:54:48 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:54:48 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:54:52 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:54:52 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 3:54:55 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 3:54:55 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:00:55 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:00:55 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:00:58 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:00:58 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:02:42 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:02:43 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:02:48 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:02:48 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:02:52 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:02:52 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:02:55 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:02:55 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:04:22 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:04:22 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:04:22 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:04:22 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:06:55 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:06:56 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:01 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:07:01 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:07:03 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:07:03 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:07:42 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:42 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:45 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:45 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:46 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:46 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:48 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:48 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:49 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:49 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:50 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:50 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:51 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:51 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:51 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:52 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:52 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:52 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:53 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:53 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:54 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:54 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:59 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:07:59 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:07:59 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:00 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:00 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:01 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:03 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:03 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:04 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:04 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:08 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:10 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:12 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:17 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:21 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:21 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:21 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:22 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:22 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:22 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:22 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:45 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:45 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:52 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:52 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:54 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:55 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:08:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:08:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:00 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:00 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:01 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:01 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:02 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:02 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:03 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:03 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:05 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:05 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:08 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:08 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:08 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:10 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:12 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:17 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:22 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:22 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:24 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:24 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:25 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:26 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:27 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:27 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:28 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:28 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:30 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:30 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:32 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:32 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:34 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:36 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:36 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:38 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:39 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:40 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:41 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:42 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:42 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:43 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:43 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:43 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:43 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:44 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:44 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:44 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:44 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:45 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:45 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:45 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:45 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:46 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:46 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:46 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:46 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:47 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:47 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:09:59 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:09:59 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:02 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:02 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:03 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:03 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:05 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:05 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:06 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:06 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:08 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:21 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:22 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:22 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:24 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:24 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:25 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:25 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:27 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:27 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:28 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:28 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:30 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:30 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:33 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:33 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:34 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:37 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:37 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:39 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:39 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:40 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:40 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:41 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:41 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:42 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:43 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:44 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:44 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:44 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:44 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:45 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:46 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:47 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:47 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:48 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:48 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:48 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:48 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:49 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:49 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:49 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:49 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:50 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:50 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:10:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:10:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:00 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:00 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:02 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:02 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:04 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:04 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:06 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:06 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:08 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:08 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:10 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:12 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:17 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:31 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:31 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:32 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:32 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:33 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:33 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:34 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:35 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:36 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:37 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:37 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:38 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:38 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:38 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:38 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:51 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:51 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:53 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:54 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:55 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:55 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:57 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:57 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:11:59 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:11:59 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:00 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:00 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:01 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:02 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:02 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:02 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:03 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:03 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:04 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:04 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:05 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:05 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:06 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:06 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:06 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:06 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:50 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:50 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:52 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:52 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:53 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:53 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:54 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:54 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:55 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:55 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:56 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:56 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:12:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:12:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:00 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:00 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:05 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:05 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:17 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:21 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:22 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:22 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:23 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:23 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:24 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:24 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:25 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:25 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:26 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:26 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:26 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:27 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:13:27 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:13:27 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:29 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:30 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:33 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:33 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:35 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:35 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:37 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:37 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:39 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:39 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:44 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:44 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:46 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:46 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:47 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:47 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:48 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:48 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:49 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:49 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:50 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:50 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:52 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:52 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:52 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:52 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:53 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:53 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:54 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:54 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:55 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:55 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:55 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:55 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:56 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:56 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:16:59 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:16:59 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:17:00 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:17:00 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:17:01 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:17:01 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:17:02 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:17:02 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:17:03 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:17:03 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:17:04 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:17:04 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:17:05 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:17:05 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:17:06 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:17:06 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:17:06 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:17:06 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:17:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:17:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:17:08 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:17:08 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:17:08 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:17:08 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:17:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:17:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:02 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:02 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:04 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:04 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:05 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:05 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:06 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:06 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:08 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:08 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:10 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:50 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:51 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:52 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:52 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:53 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:53 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:54 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:54 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:55 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:55 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:56 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:56 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:57 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:57 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:18:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:18:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:19:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:19:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:00 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:00 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:01 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:01 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:03 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:03 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:04 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:04 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:10 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:17 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:20:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:20:23 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:20:23 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:20:26 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:20:26 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:21:04 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:21:04 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:21:06 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:21:06 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:21:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:21:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:21:08 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:21:08 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:21:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:21:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:21:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:21:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:21:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:21:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:21:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:21:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:21:23 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:21:23 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:21:26 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:21:26 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:22:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:22:34 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:22:35 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:22:35 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:22:38 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:22:38 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:22:39 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:22:39 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:22:42 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:22:42 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:22:43 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:22:43 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:22:47 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:22:47 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:22:57 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:22:57 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:02 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:23:02 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:23:05 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:23:05 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:23:05 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:05 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:08 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:08 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:10 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:12 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:12 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:17 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:23:21 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:23:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:21 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:30 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:30 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:32 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:32 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:33 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:33 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:34 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:35 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:35 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:35 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:36 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:36 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:36 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:36 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:37 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:37 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:38 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:38 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:39 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:39 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:41 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:41 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:42 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:42 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:43 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:43 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:44 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:44 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:45 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:45 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:45 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:45 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:47 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:47 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:48 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:48 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:49 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:49 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:50 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:50 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:50 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:50 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:51 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:51 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:52 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:52 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:52 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:53 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:53 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:53 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:54 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:54 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:55 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:55 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:55 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:55 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:56 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:56 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:56 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:56 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:57 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:57 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:57 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:57 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:25:59 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:25:59 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:01 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:01 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:03 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:03 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:04 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:04 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:25 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:26:25 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:26:26 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:26:26 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:26:27 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:27 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:28 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:28 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:29 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:29 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:31 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:31 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:34 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:39 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:26:39 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:26:43 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:26:43 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:26:45 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:26:45 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:26:46 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:46 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:48 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:48 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:48 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:48 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:49 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:49 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:49 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:49 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:50 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:50 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:51 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:51 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:26:52 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:26:52 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:12 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:25 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:25 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:26 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:26 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:27 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:27 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:28 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:28 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:29 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:29 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:30 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:30 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:30 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:31 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:31 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:31 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:34 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:35 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:35 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:36 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:36 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:37 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:37 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:37 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:37 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:38 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:38 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:39 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:39 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:40 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:40 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:41 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:41 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:27:42 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:27:42 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:17 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:25 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:25 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:29 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:29 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:29 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:29 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:30 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:30 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:30 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:30 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:31 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:31 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:31 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:31 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:32 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:32 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:33 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:33 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:33 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:33 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:40 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:40 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:41 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:42 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:43 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:43 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:44 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:44 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:45 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:45 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:46 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:46 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:47 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:47 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:47 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:47 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:29:48 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:29:48 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:04 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:04 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:08 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:08 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:12 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:17 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:21 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:22 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:22 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:22 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:22 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:23 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:23 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:30:23 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:30:23 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:31:10 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:31:10 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:31:13 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:31:13 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:32:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:32:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:32:59 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:32:59 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:33:00 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:33:00 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:33:01 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:33:01 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:33:01 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:33:01 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:33:02 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:33:02 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:33:03 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:33:03 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:33:04 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:33:04 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:33:05 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:33:05 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:10 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:12 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:21 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:22 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:22 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:23 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:23 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:23 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:23 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:24 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:24 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:24 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:24 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:49 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:49 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:51 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:51 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:53 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:53 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:54 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:54 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:55 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:55 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:34:59 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:34:59 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:04 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:04 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:12 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:17 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:21 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:22 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:22 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:22 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:22 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:23 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:23 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:24 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:24 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:25 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:25 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:26 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:26 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:27 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:27 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:28 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:28 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:29 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:29 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:32 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:32 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:34 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:34 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:35 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:35 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:36 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:36 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:36 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:36 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:37 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:37 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:39 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:39 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:41 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:41 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:42 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:42 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:44 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:44 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:47 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:47 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:48 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:48 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:50 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:50 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:52 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:52 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:35:56 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:35:56 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:00 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:00 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:06 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:06 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:12 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:17 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:22 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:22 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:23 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:23 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:24 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:24 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:24 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:24 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:25 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:25 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:26 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:26 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:26 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:26 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:27 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:27 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:28 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:28 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:30 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:30 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:31 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:31 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:32 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:32 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:33 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:33 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:33 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:33 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:34 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:35 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:35 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:35 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:36 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:36 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:36 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:36 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:37 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:37 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:37 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:37 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:38 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:38 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:38 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:38 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:39 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:39 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:39 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:39 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:40 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:40 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:40 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:40 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:40 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:40 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:41 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:41 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:41 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:41 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:42 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:42 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:43 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:43 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:44 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:44 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:45 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:45 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:46 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:46 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:47 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:47 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:48 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:48 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:49 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:49 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:52 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:52 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:56 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:56 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:57 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:57 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:36:59 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:36:59 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:02 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:03 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:03 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:03 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:05 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:05 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:08 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:08 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:10 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:12 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:20 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:21 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:25 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:25 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:26 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:26 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:28 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:28 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:31 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:32 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:41 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:41 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:42 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:37:42 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:37:45 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:45 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:46 pm] [BaseService] Action: [Before getAll], Payload: null
[3/1/2025, 4:37:46 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[3/1/2025, 4:37:47 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:47 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:48 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:48 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:49 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:50 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:51 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:51 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:52 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:52 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:53 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:54 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:55 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:55 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:56 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:56 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:37:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:37:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:00 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:00 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:02 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:02 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:03 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:03 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:05 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:05 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:06 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:08 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:08 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:10 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:12 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:13 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:14 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:16 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:16 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:17 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:18 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:21 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:22 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:22 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:23 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:23 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:24 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:24 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:24 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:24 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:25 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:25 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:26 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:26 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:26 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:26 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:28 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:28 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:28 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:28 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:29 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:29 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:29 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:29 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:30 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:30 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:30 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:30 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:30 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:30 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:31 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:31 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:35 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:35 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:36 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:36 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:37 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:37 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:39 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:39 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:40 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "how-to-become-a-10x-dev"
[3/1/2025, 4:38:40 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"adc572a6-86f1-45fb-a0a0-1d319dc129d2","createdAt":"2025-01-02T10:36:15.416Z","updatedAt":"2025-01-02T10:36:15.416Z","fullContent":[{"id":"h1nodejs-a-js-runtime-environment","type":"heading-one","children":[{"text":"h1-nodejs- a js runtime environment"}]},{"id":"h2fs-module","type":"heading-two","children":[{"text":"h2-fs module"}]},{"id":"h3create-a-file-in-nextjs","type":"heading-three","children":[{"text":"h3-create a file in nextjs"}]},{"id":"h2os-module","type":"heading-two","children":[{"text":"h2-os module"}]},{"id":"h2multi-threading","type":"heading-two","children":[{"text":"h2-multi threading"}]},{"id":"h3why-multi-threading-is-important","type":"heading-three","children":[{"text":"h3-why multi threading is important"}]},{"type":"code-block","children":[{"type":"code-line","children":[{"text":"// you can now write your own blog"}]},{"type":"code-line","children":[{"text":"const initialValue = ["}]},{"type":"code-line","children":[{"text":"  {"}]},{"type":"code-line","children":[{"text":"    type: 'paragraph',"}]},{"type":"code-line","children":[{"text":"    children: [{ text: 'A line of text in a paragraph.' }]"}]},{"type":"code-line","children":[{"text":"  }"}]},{"type":"code-line","children":[{"text":"]"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"const App = () => {"}]},{"type":"code-line","children":[{"text":"  const [editor] = useState(() => withReact(createEditor()))"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"  return ("}]},{"type":"code-line","children":[{"text":"    <Slate editor={editor} initialValue={initialValue}>"}]},{"type":"code-line","children":[{"text":"      <Editable />"}]},{"type":"code-line","children":[{"text":"    </Slate>"}]},{"type":"code-line","children":[{"text":"  )"}]},{"type":"code-line","children":[{"text":"}"}]}],"language":"jsx"},{"type":"paragraph","children":[{"text":"This is editable "},{"bold":true,"text":"rich"},{"text":" text, "},{"text":"much","italic":true},{"text":" better than a "},{"code":true,"text":"<textarea>"},{"text":"!"}]},{"type":"paragraph","children":[{"text":"Since it's rich text, you can do things like turn a selection of text "},{"bold":true,"text":"bold"},{"text":", or add a semantically rendered block quote in the middle of the page, like this:"}]},{"type":"block-quote","children":[{"text":"A wise quote."}]},{"type":"paragraph","align":"center","children":[{"text":"Try it out for yourself!"}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"8e00cecc-fd1c-4eab-8856-ddacc6ad2301"}
[3/1/2025, 4:38:41 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:41 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:43 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:43 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:45 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:45 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:46 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:46 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:47 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:47 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:48 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:48 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:50 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:50 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:51 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:51 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:53 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:53 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:55 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:55 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:56 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "how-to-become-a-10x-dev"
[3/1/2025, 4:38:56 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"adc572a6-86f1-45fb-a0a0-1d319dc129d2","createdAt":"2025-01-02T10:36:15.416Z","updatedAt":"2025-01-02T10:36:15.416Z","fullContent":[{"id":"h1nodejs-a-js-runtime-environment","type":"heading-one","children":[{"text":"h1-nodejs- a js runtime environment"}]},{"id":"h2fs-module","type":"heading-two","children":[{"text":"h2-fs module"}]},{"id":"h3create-a-file-in-nextjs","type":"heading-three","children":[{"text":"h3-create a file in nextjs"}]},{"id":"h2os-module","type":"heading-two","children":[{"text":"h2-os module"}]},{"id":"h2multi-threading","type":"heading-two","children":[{"text":"h2-multi threading"}]},{"id":"h3why-multi-threading-is-important","type":"heading-three","children":[{"text":"h3-why multi threading is important"}]},{"type":"code-block","children":[{"type":"code-line","children":[{"text":"// you can now write your own blog"}]},{"type":"code-line","children":[{"text":"const initialValue = ["}]},{"type":"code-line","children":[{"text":"  {"}]},{"type":"code-line","children":[{"text":"    type: 'paragraph',"}]},{"type":"code-line","children":[{"text":"    children: [{ text: 'A line of text in a paragraph.' }]"}]},{"type":"code-line","children":[{"text":"  }"}]},{"type":"code-line","children":[{"text":"]"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"const App = () => {"}]},{"type":"code-line","children":[{"text":"  const [editor] = useState(() => withReact(createEditor()))"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"  return ("}]},{"type":"code-line","children":[{"text":"    <Slate editor={editor} initialValue={initialValue}>"}]},{"type":"code-line","children":[{"text":"      <Editable />"}]},{"type":"code-line","children":[{"text":"    </Slate>"}]},{"type":"code-line","children":[{"text":"  )"}]},{"type":"code-line","children":[{"text":"}"}]}],"language":"jsx"},{"type":"paragraph","children":[{"text":"This is editable "},{"bold":true,"text":"rich"},{"text":" text, "},{"text":"much","italic":true},{"text":" better than a "},{"code":true,"text":"<textarea>"},{"text":"!"}]},{"type":"paragraph","children":[{"text":"Since it's rich text, you can do things like turn a selection of text "},{"bold":true,"text":"bold"},{"text":", or add a semantically rendered block quote in the middle of the page, like this:"}]},{"type":"block-quote","children":[{"text":"A wise quote."}]},{"type":"paragraph","align":"center","children":[{"text":"Try it out for yourself!"}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"8e00cecc-fd1c-4eab-8856-ddacc6ad2301"}
[3/1/2025, 4:38:57 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:57 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:38:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:38:59 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:39:00 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:39:00 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[3/1/2025, 4:39:01 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[3/1/2025, 4:39:01 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 2:55:01 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 2:55:06 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 2:55:21 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 2:55:21 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 2:55:22 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 2:55:22 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 2:55:31 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 2:55:31 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 2:55:31 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 2:55:31 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 2:56:13 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 2:56:13 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 2:56:13 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 2:56:13 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 2:57:24 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 2:57:24 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 2:57:24 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 2:57:24 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:00:16 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:00:16 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:00:17 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:00:17 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:00:17 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:00:17 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:00:17 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:00:17 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:00:23 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:00:23 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:00:23 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:00:23 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:02:03 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:02:06 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:02:09 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:02:09 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:02:09 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:02:09 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:03:28 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:03:28 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:03:29 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:03:29 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:04:58 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:04:58 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:04:59 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:04:59 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:13:56 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:14:49 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:19:18 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:19:22 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:19:23 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:19:23 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:19:40 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:19:40 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:19:40 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:19:40 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:21:38 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:21:38 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:21:38 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:21:38 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:25:14 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:25:14 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:25:14 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:25:14 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:33:07 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:33:07 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:33:07 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:33:07 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:36:37 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:36:37 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:36:37 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:36:37 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:36:38 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:36:38 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:36:38 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:36:38 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:37:42 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:37:42 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:37:42 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:37:42 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:41:27 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:41:27 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:41:27 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:41:27 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:44:49 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:44:50 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:44:50 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:44:50 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:46:54 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:46:55 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:46:55 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:46:55 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:49:41 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:49:41 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:49:41 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 3:49:41 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 3:50:11 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 3:50:11 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 3:50:19 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "how-to-become-a-10x-dev"
[4/1/2025, 3:50:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"adc572a6-86f1-45fb-a0a0-1d319dc129d2","createdAt":"2025-01-02T10:36:15.416Z","updatedAt":"2025-01-02T10:36:15.416Z","fullContent":[{"id":"h1nodejs-a-js-runtime-environment","type":"heading-one","children":[{"text":"h1-nodejs- a js runtime environment"}]},{"id":"h2fs-module","type":"heading-two","children":[{"text":"h2-fs module"}]},{"id":"h3create-a-file-in-nextjs","type":"heading-three","children":[{"text":"h3-create a file in nextjs"}]},{"id":"h2os-module","type":"heading-two","children":[{"text":"h2-os module"}]},{"id":"h2multi-threading","type":"heading-two","children":[{"text":"h2-multi threading"}]},{"id":"h3why-multi-threading-is-important","type":"heading-three","children":[{"text":"h3-why multi threading is important"}]},{"type":"code-block","children":[{"type":"code-line","children":[{"text":"// you can now write your own blog"}]},{"type":"code-line","children":[{"text":"const initialValue = ["}]},{"type":"code-line","children":[{"text":"  {"}]},{"type":"code-line","children":[{"text":"    type: 'paragraph',"}]},{"type":"code-line","children":[{"text":"    children: [{ text: 'A line of text in a paragraph.' }]"}]},{"type":"code-line","children":[{"text":"  }"}]},{"type":"code-line","children":[{"text":"]"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"const App = () => {"}]},{"type":"code-line","children":[{"text":"  const [editor] = useState(() => withReact(createEditor()))"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"  return ("}]},{"type":"code-line","children":[{"text":"    <Slate editor={editor} initialValue={initialValue}>"}]},{"type":"code-line","children":[{"text":"      <Editable />"}]},{"type":"code-line","children":[{"text":"    </Slate>"}]},{"type":"code-line","children":[{"text":"  )"}]},{"type":"code-line","children":[{"text":"}"}]}],"language":"jsx"},{"type":"paragraph","children":[{"text":"This is editable "},{"bold":true,"text":"rich"},{"text":" text, "},{"text":"much","italic":true},{"text":" better than a "},{"code":true,"text":"<textarea>"},{"text":"!"}]},{"type":"paragraph","children":[{"text":"Since it's rich text, you can do things like turn a selection of text "},{"bold":true,"text":"bold"},{"text":", or add a semantically rendered block quote in the middle of the page, like this:"}]},{"type":"block-quote","children":[{"text":"A wise quote."}]},{"type":"paragraph","align":"center","children":[{"text":"Try it out for yourself!"}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"8e00cecc-fd1c-4eab-8856-ddacc6ad2301"}
[4/1/2025, 3:50:23 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "whats-new-in-nextjs-v18"
[4/1/2025, 3:50:23 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: null
[4/1/2025, 4:18:06 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:18:09 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:18:11 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:18:12 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:26:04 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:26:05 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:26:08 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:26:09 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:26:34 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:26:34 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:26:34 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:26:34 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:32:27 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:32:33 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:32:33 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:33:18 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:33:18 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:33:20 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:33:20 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:38:08 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:38:12 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:38:15 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:38:16 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:38:52 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:38:52 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:38:56 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:38:56 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:41:48 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:41:49 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:41:56 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:41:56 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:42:45 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:42:46 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:42:50 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:42:50 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:49:30 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:49:31 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:49:32 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:49:32 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:50:03 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:50:03 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:50:05 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:50:05 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:51:04 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:51:14 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:51:17 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:55:24 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:55:24 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:55:25 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:55:25 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:56:15 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:56:17 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:56:19 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:56:19 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:59:33 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:59:36 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 4:59:49 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 4:59:52 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:00:40 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:00:45 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:00:52 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:00:52 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:04:35 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:04:39 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:05:57 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:06:02 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:06:09 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:06:09 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:06:23 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:06:24 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:06:27 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:06:27 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:08:55 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:08:56 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:08:57 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:08:57 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:17:36 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:17:36 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:17:42 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:17:42 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:19:01 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:19:01 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:19:18 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:19:18 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:20:02 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:20:02 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:20:06 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:20:06 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:23:35 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:23:36 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:34:20 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:34:21 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:34:56 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:34:57 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:34:58 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:34:58 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:35:17 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:35:17 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:35:43 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:35:43 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:35:43 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:35:43 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:35:50 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:35:50 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:35:50 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:35:50 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:36:03 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:36:03 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:36:06 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:36:06 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:36:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:36:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:36:23 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:36:23 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:36:24 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:36:24 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:36:25 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:36:25 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:36:25 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:36:25 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:36:26 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:36:26 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:36:28 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:36:28 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:37:01 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "how-to-become-a-10x-dev"
[4/1/2025, 5:37:01 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"adc572a6-86f1-45fb-a0a0-1d319dc129d2","createdAt":"2025-01-02T10:36:15.416Z","updatedAt":"2025-01-02T10:36:15.416Z","fullContent":[{"id":"h1nodejs-a-js-runtime-environment","type":"heading-one","children":[{"text":"h1-nodejs- a js runtime environment"}]},{"id":"h2fs-module","type":"heading-two","children":[{"text":"h2-fs module"}]},{"id":"h3create-a-file-in-nextjs","type":"heading-three","children":[{"text":"h3-create a file in nextjs"}]},{"id":"h2os-module","type":"heading-two","children":[{"text":"h2-os module"}]},{"id":"h2multi-threading","type":"heading-two","children":[{"text":"h2-multi threading"}]},{"id":"h3why-multi-threading-is-important","type":"heading-three","children":[{"text":"h3-why multi threading is important"}]},{"type":"code-block","children":[{"type":"code-line","children":[{"text":"// you can now write your own blog"}]},{"type":"code-line","children":[{"text":"const initialValue = ["}]},{"type":"code-line","children":[{"text":"  {"}]},{"type":"code-line","children":[{"text":"    type: 'paragraph',"}]},{"type":"code-line","children":[{"text":"    children: [{ text: 'A line of text in a paragraph.' }]"}]},{"type":"code-line","children":[{"text":"  }"}]},{"type":"code-line","children":[{"text":"]"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"const App = () => {"}]},{"type":"code-line","children":[{"text":"  const [editor] = useState(() => withReact(createEditor()))"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"  return ("}]},{"type":"code-line","children":[{"text":"    <Slate editor={editor} initialValue={initialValue}>"}]},{"type":"code-line","children":[{"text":"      <Editable />"}]},{"type":"code-line","children":[{"text":"    </Slate>"}]},{"type":"code-line","children":[{"text":"  )"}]},{"type":"code-line","children":[{"text":"}"}]}],"language":"jsx"},{"type":"paragraph","children":[{"text":"This is editable "},{"bold":true,"text":"rich"},{"text":" text, "},{"text":"much","italic":true},{"text":" better than a "},{"code":true,"text":"<textarea>"},{"text":"!"}]},{"type":"paragraph","children":[{"text":"Since it's rich text, you can do things like turn a selection of text "},{"bold":true,"text":"bold"},{"text":", or add a semantically rendered block quote in the middle of the page, like this:"}]},{"type":"block-quote","children":[{"text":"A wise quote."}]},{"type":"paragraph","align":"center","children":[{"text":"Try it out for yourself!"}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"8e00cecc-fd1c-4eab-8856-ddacc6ad2301"}
[4/1/2025, 5:37:07 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "how-to-become-a-10x-dev"
[4/1/2025, 5:37:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"adc572a6-86f1-45fb-a0a0-1d319dc129d2","createdAt":"2025-01-02T10:36:15.416Z","updatedAt":"2025-01-02T10:36:15.416Z","fullContent":[{"id":"h1nodejs-a-js-runtime-environment","type":"heading-one","children":[{"text":"h1-nodejs- a js runtime environment"}]},{"id":"h2fs-module","type":"heading-two","children":[{"text":"h2-fs module"}]},{"id":"h3create-a-file-in-nextjs","type":"heading-three","children":[{"text":"h3-create a file in nextjs"}]},{"id":"h2os-module","type":"heading-two","children":[{"text":"h2-os module"}]},{"id":"h2multi-threading","type":"heading-two","children":[{"text":"h2-multi threading"}]},{"id":"h3why-multi-threading-is-important","type":"heading-three","children":[{"text":"h3-why multi threading is important"}]},{"type":"code-block","children":[{"type":"code-line","children":[{"text":"// you can now write your own blog"}]},{"type":"code-line","children":[{"text":"const initialValue = ["}]},{"type":"code-line","children":[{"text":"  {"}]},{"type":"code-line","children":[{"text":"    type: 'paragraph',"}]},{"type":"code-line","children":[{"text":"    children: [{ text: 'A line of text in a paragraph.' }]"}]},{"type":"code-line","children":[{"text":"  }"}]},{"type":"code-line","children":[{"text":"]"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"const App = () => {"}]},{"type":"code-line","children":[{"text":"  const [editor] = useState(() => withReact(createEditor()))"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"  return ("}]},{"type":"code-line","children":[{"text":"    <Slate editor={editor} initialValue={initialValue}>"}]},{"type":"code-line","children":[{"text":"      <Editable />"}]},{"type":"code-line","children":[{"text":"    </Slate>"}]},{"type":"code-line","children":[{"text":"  )"}]},{"type":"code-line","children":[{"text":"}"}]}],"language":"jsx"},{"type":"paragraph","children":[{"text":"This is editable "},{"bold":true,"text":"rich"},{"text":" text, "},{"text":"much","italic":true},{"text":" better than a "},{"code":true,"text":"<textarea>"},{"text":"!"}]},{"type":"paragraph","children":[{"text":"Since it's rich text, you can do things like turn a selection of text "},{"bold":true,"text":"bold"},{"text":", or add a semantically rendered block quote in the middle of the page, like this:"}]},{"type":"block-quote","children":[{"text":"A wise quote."}]},{"type":"paragraph","align":"center","children":[{"text":"Try it out for yourself!"}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"8e00cecc-fd1c-4eab-8856-ddacc6ad2301"}
[4/1/2025, 5:37:37 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "whats-new-in-nextjs-v18"
[4/1/2025, 5:37:37 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: null
[4/1/2025, 5:38:06 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:38:06 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:38:06 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:38:06 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:39:08 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:39:08 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:39:09 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "whats-new-in-nextjs-v18"
[4/1/2025, 5:39:09 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: null
[4/1/2025, 5:43:18 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:43:19 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:43:24 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "whats-new-in-nextjs-v18"
[4/1/2025, 5:43:24 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: null
[4/1/2025, 5:43:34 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:43:34 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:43:36 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:43:36 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:43:39 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "how-to-become-a-10x-dev"
[4/1/2025, 5:43:39 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"adc572a6-86f1-45fb-a0a0-1d319dc129d2","createdAt":"2025-01-02T10:36:15.416Z","updatedAt":"2025-01-02T10:36:15.416Z","fullContent":[{"id":"h1nodejs-a-js-runtime-environment","type":"heading-one","children":[{"text":"h1-nodejs- a js runtime environment"}]},{"id":"h2fs-module","type":"heading-two","children":[{"text":"h2-fs module"}]},{"id":"h3create-a-file-in-nextjs","type":"heading-three","children":[{"text":"h3-create a file in nextjs"}]},{"id":"h2os-module","type":"heading-two","children":[{"text":"h2-os module"}]},{"id":"h2multi-threading","type":"heading-two","children":[{"text":"h2-multi threading"}]},{"id":"h3why-multi-threading-is-important","type":"heading-three","children":[{"text":"h3-why multi threading is important"}]},{"type":"code-block","children":[{"type":"code-line","children":[{"text":"// you can now write your own blog"}]},{"type":"code-line","children":[{"text":"const initialValue = ["}]},{"type":"code-line","children":[{"text":"  {"}]},{"type":"code-line","children":[{"text":"    type: 'paragraph',"}]},{"type":"code-line","children":[{"text":"    children: [{ text: 'A line of text in a paragraph.' }]"}]},{"type":"code-line","children":[{"text":"  }"}]},{"type":"code-line","children":[{"text":"]"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"const App = () => {"}]},{"type":"code-line","children":[{"text":"  const [editor] = useState(() => withReact(createEditor()))"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"  return ("}]},{"type":"code-line","children":[{"text":"    <Slate editor={editor} initialValue={initialValue}>"}]},{"type":"code-line","children":[{"text":"      <Editable />"}]},{"type":"code-line","children":[{"text":"    </Slate>"}]},{"type":"code-line","children":[{"text":"  )"}]},{"type":"code-line","children":[{"text":"}"}]}],"language":"jsx"},{"type":"paragraph","children":[{"text":"This is editable "},{"bold":true,"text":"rich"},{"text":" text, "},{"text":"much","italic":true},{"text":" better than a "},{"code":true,"text":"<textarea>"},{"text":"!"}]},{"type":"paragraph","children":[{"text":"Since it's rich text, you can do things like turn a selection of text "},{"bold":true,"text":"bold"},{"text":", or add a semantically rendered block quote in the middle of the page, like this:"}]},{"type":"block-quote","children":[{"text":"A wise quote."}]},{"type":"paragraph","align":"center","children":[{"text":"Try it out for yourself!"}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"8e00cecc-fd1c-4eab-8856-ddacc6ad2301"}
[4/1/2025, 5:44:50 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:44:50 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:45:05 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "whats-new-in-nextjs-v18"
[4/1/2025, 5:45:05 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: null
[4/1/2025, 5:45:10 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "how-to-become-a-10x-dev"
[4/1/2025, 5:45:10 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"adc572a6-86f1-45fb-a0a0-1d319dc129d2","createdAt":"2025-01-02T10:36:15.416Z","updatedAt":"2025-01-02T10:36:15.416Z","fullContent":[{"id":"h1nodejs-a-js-runtime-environment","type":"heading-one","children":[{"text":"h1-nodejs- a js runtime environment"}]},{"id":"h2fs-module","type":"heading-two","children":[{"text":"h2-fs module"}]},{"id":"h3create-a-file-in-nextjs","type":"heading-three","children":[{"text":"h3-create a file in nextjs"}]},{"id":"h2os-module","type":"heading-two","children":[{"text":"h2-os module"}]},{"id":"h2multi-threading","type":"heading-two","children":[{"text":"h2-multi threading"}]},{"id":"h3why-multi-threading-is-important","type":"heading-three","children":[{"text":"h3-why multi threading is important"}]},{"type":"code-block","children":[{"type":"code-line","children":[{"text":"// you can now write your own blog"}]},{"type":"code-line","children":[{"text":"const initialValue = ["}]},{"type":"code-line","children":[{"text":"  {"}]},{"type":"code-line","children":[{"text":"    type: 'paragraph',"}]},{"type":"code-line","children":[{"text":"    children: [{ text: 'A line of text in a paragraph.' }]"}]},{"type":"code-line","children":[{"text":"  }"}]},{"type":"code-line","children":[{"text":"]"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"const App = () => {"}]},{"type":"code-line","children":[{"text":"  const [editor] = useState(() => withReact(createEditor()))"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"  return ("}]},{"type":"code-line","children":[{"text":"    <Slate editor={editor} initialValue={initialValue}>"}]},{"type":"code-line","children":[{"text":"      <Editable />"}]},{"type":"code-line","children":[{"text":"    </Slate>"}]},{"type":"code-line","children":[{"text":"  )"}]},{"type":"code-line","children":[{"text":"}"}]}],"language":"jsx"},{"type":"paragraph","children":[{"text":"This is editable "},{"bold":true,"text":"rich"},{"text":" text, "},{"text":"much","italic":true},{"text":" better than a "},{"code":true,"text":"<textarea>"},{"text":"!"}]},{"type":"paragraph","children":[{"text":"Since it's rich text, you can do things like turn a selection of text "},{"bold":true,"text":"bold"},{"text":", or add a semantically rendered block quote in the middle of the page, like this:"}]},{"type":"block-quote","children":[{"text":"A wise quote."}]},{"type":"paragraph","align":"center","children":[{"text":"Try it out for yourself!"}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"8e00cecc-fd1c-4eab-8856-ddacc6ad2301"}
[4/1/2025, 5:45:17 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:45:17 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:45:18 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:45:18 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:46:31 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:46:31 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:46:50 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:46:50 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:47:18 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 5:47:19 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 5:47:41 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:47:41 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:47:43 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:47:43 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:48:06 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "whats-new-in-nextjs-v18"
[4/1/2025, 5:48:07 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: null
[4/1/2025, 5:48:13 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "how-to-become-a-10x-dev"
[4/1/2025, 5:48:14 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"adc572a6-86f1-45fb-a0a0-1d319dc129d2","createdAt":"2025-01-02T10:36:15.416Z","updatedAt":"2025-01-02T10:36:15.416Z","fullContent":[{"id":"h1nodejs-a-js-runtime-environment","type":"heading-one","children":[{"text":"h1-nodejs- a js runtime environment"}]},{"id":"h2fs-module","type":"heading-two","children":[{"text":"h2-fs module"}]},{"id":"h3create-a-file-in-nextjs","type":"heading-three","children":[{"text":"h3-create a file in nextjs"}]},{"id":"h2os-module","type":"heading-two","children":[{"text":"h2-os module"}]},{"id":"h2multi-threading","type":"heading-two","children":[{"text":"h2-multi threading"}]},{"id":"h3why-multi-threading-is-important","type":"heading-three","children":[{"text":"h3-why multi threading is important"}]},{"type":"code-block","children":[{"type":"code-line","children":[{"text":"// you can now write your own blog"}]},{"type":"code-line","children":[{"text":"const initialValue = ["}]},{"type":"code-line","children":[{"text":"  {"}]},{"type":"code-line","children":[{"text":"    type: 'paragraph',"}]},{"type":"code-line","children":[{"text":"    children: [{ text: 'A line of text in a paragraph.' }]"}]},{"type":"code-line","children":[{"text":"  }"}]},{"type":"code-line","children":[{"text":"]"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"const App = () => {"}]},{"type":"code-line","children":[{"text":"  const [editor] = useState(() => withReact(createEditor()))"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"  return ("}]},{"type":"code-line","children":[{"text":"    <Slate editor={editor} initialValue={initialValue}>"}]},{"type":"code-line","children":[{"text":"      <Editable />"}]},{"type":"code-line","children":[{"text":"    </Slate>"}]},{"type":"code-line","children":[{"text":"  )"}]},{"type":"code-line","children":[{"text":"}"}]}],"language":"jsx"},{"type":"paragraph","children":[{"text":"This is editable "},{"bold":true,"text":"rich"},{"text":" text, "},{"text":"much","italic":true},{"text":" better than a "},{"code":true,"text":"<textarea>"},{"text":"!"}]},{"type":"paragraph","children":[{"text":"Since it's rich text, you can do things like turn a selection of text "},{"bold":true,"text":"bold"},{"text":", or add a semantically rendered block quote in the middle of the page, like this:"}]},{"type":"block-quote","children":[{"text":"A wise quote."}]},{"type":"paragraph","align":"center","children":[{"text":"Try it out for yourself!"}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"8e00cecc-fd1c-4eab-8856-ddacc6ad2301"}
[4/1/2025, 5:49:32 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:49:32 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 5:49:33 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 5:49:33 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 8:35:05 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:35:10 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:36:13 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:36:19 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:37:24 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:37:24 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 8:37:24 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:37:24 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 8:38:16 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:38:16 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 8:38:16 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:38:16 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 8:39:57 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "learn-statemanagement-in-reactjs"
[4/1/2025, 8:39:57 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"f7c51c3e-8987-4b76-9ac0-dd9babf05802","createdAt":"2024-12-27T09:35:02.195Z","updatedAt":"2025-01-02T10:28:59.689Z","fullContent":[{"type":"paragraph","align":"center","children":[{"text":"1. **React State "},{"bold":true,"text":"part 2"},{"text":"**: React state is a way to manage data or UI changes within a component, using `useState` or `useReducer`.  "}]},{"type":"paragraph","align":"center","children":[{"text":"2. **Props vs State**: State is internal to a component, while props are passed between components to share data.  "}]},{"type":"paragraph","align":"center","children":[{"text":"3. **Global State**: For app-wide state management, libraries like Redux, MobX, or React Context API are commonly used.  "}]},{"type":"paragraph","align":"center","children":[{"text":"4. **Best Practices**: Keep state minimal and colocate it with the component that directly uses it to reduce complexity.  "}]},{"type":"paragraph","align":"center","children":[{"text":"5. **Performance**: Avoid unnecessary re-renders by using memoization (`React.memo`, `useMemo`, `useCallback`) and splitting state.  "}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"f6019a23-837a-4098-8c60-42b320be6abd"}
[4/1/2025, 8:43:08 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:43:08 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 8:43:08 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:43:08 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 8:45:29 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:45:29 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 8:45:29 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:45:29 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 8:46:01 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:46:01 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 8:46:02 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 8:46:02 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:13:58 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:13:58 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:14:06 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:14:07 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:14:15 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:14:15 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:14:15 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:14:15 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:14:36 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:14:36 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:14:37 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:14:37 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:14:59 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:14:59 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:15:07 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:15:07 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:16:53 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:16:53 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:16:53 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:16:53 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:17:54 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:17:54 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:17:54 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:17:54 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:18:21 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:18:21 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:18:21 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:18:21 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:19:03 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:19:03 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:19:03 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:19:03 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:19:11 pm] [BaseService] Action: [Before delete], Payload: "f6019a23-837a-4098-8c60-42b320be6abd"
[4/1/2025, 9:19:20 pm] [BaseService] Action: [Before delete], Payload: "f6019a23-837a-4098-8c60-42b320be6abd"
[4/1/2025, 9:19:23 pm] [BaseService] Action: [Before delete], Payload: "f6019a23-837a-4098-8c60-42b320be6abd"
[4/1/2025, 9:19:33 pm] [BaseService] Action: [Before delete], Payload: "f6019a23-837a-4098-8c60-42b320be6abd"
[4/1/2025, 9:19:37 pm] [BaseService] Action: [Before delete], Payload: "f6019a23-837a-4098-8c60-42b320be6abd"
[4/1/2025, 9:24:23 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:24:24 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:24:25 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:24:25 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:24:41 pm] [BaseService] Action: [Before delete], Payload: "f6019a23-837a-4098-8c60-42b320be6abd"
[4/1/2025, 9:31:01 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:31:01 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:31:01 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:31:01 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:31:08 pm] [BaseService] Action: [Before delete], Payload: "f6019a23-837a-4098-8c60-42b320be6abd"
[4/1/2025, 9:31:08 pm] [BaseService] Action: [After delete], Payload: {"id":"f6019a23-837a-4098-8c60-42b320be6abd","createdAt":"2024-12-27T09:34:43.858Z","updatedAt":"2024-12-27T09:34:43.858Z","topicId":"826f0fe0-8748-4bef-94dc-548782da6f37","authorId":"48942f89-e703-4a29-a621-0fc21456211b","title":"learn statemanagement in reactjs","skillLevel":"INTERMEDIATE","description":null,"slug":"learn-statemanagement-in-reactjs","views":0,"readTimeInMinutes":null}
[4/1/2025, 9:31:16 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:31:16 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 9:31:16 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 9:31:16 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:17:50 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:17:54 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:18:13 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:18:13 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:18:13 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:18:13 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:18:31 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:18:31 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:18:31 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:18:31 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:18:53 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:18:53 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:18:54 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:18:54 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:20:30 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:20:30 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:20:31 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:20:31 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:20:41 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:20:41 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:20:41 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:20:41 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:20:49 pm] [BaseService] Action: [Before delete], Payload: "8e00cecc-fd1c-4eab-8856-ddacc6ad2301"
[4/1/2025, 11:20:49 pm] [BaseService] Action: [After delete], Payload: {"id":"8e00cecc-fd1c-4eab-8856-ddacc6ad2301","createdAt":"2025-01-02T10:36:06.139Z","updatedAt":"2025-01-02T10:36:06.139Z","topicId":"1616764d-310c-430c-b8e5-2ef8d5be9e74","authorId":"48942f89-e703-4a29-a621-0fc21456211b","title":"how to become a 10x dev","skillLevel":"INTERMEDIATE","description":null,"slug":"how-to-become-a-10x-dev","views":0,"readTimeInMinutes":null}
[4/1/2025, 11:25:02 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:25:02 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:25:03 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:25:03 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:25:45 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:25:45 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:25:45 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:25:45 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:27:34 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:27:34 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:27:34 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:27:34 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:27:43 pm] [BaseService] Action: [Before delete], Payload: "8e00cecc-fd1c-4eab-8856-ddacc6ad2301"
[4/1/2025, 11:27:52 pm] [BaseService] Action: [Before delete], Payload: "1debe63b-048a-4aa4-aa34-e8426045540d"
[4/1/2025, 11:27:52 pm] [BaseService] Action: [After delete], Payload: {"id":"1debe63b-048a-4aa4-aa34-e8426045540d","createdAt":"2025-01-04T10:06:51.237Z","updatedAt":"2025-01-04T10:06:51.237Z","topicId":"526177cf-d1f4-4a36-ac48-9ebd328c231a","authorId":"48942f89-e703-4a29-a621-0fc21456211b","title":"whats new in nextjs v18","skillLevel":"INTERMEDIATE","description":null,"slug":"whats-new-in-nextjs-v18","views":0,"readTimeInMinutes":null}
[4/1/2025, 11:28:03 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:28:03 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:28:03 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:28:03 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:29:19 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:29:19 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:29:19 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:29:19 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:29:26 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:29:26 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:29:26 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:29:26 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:29:48 pm] [BaseService] Action: [Before delete], Payload: "ece19494-3d12-4502-90d2-31eccdf6aa4f"
[4/1/2025, 11:29:48 pm] [BaseService] Action: [After delete], Payload: {"id":"ece19494-3d12-4502-90d2-31eccdf6aa4f","createdAt":"2025-01-04T17:58:13.622Z","updatedAt":"2025-01-04T17:58:13.622Z","topicId":"826f0fe0-8748-4bef-94dc-548782da6f37","authorId":"48942f89-e703-4a29-a621-0fc21456211b","title":"whats new in nextjs v18","skillLevel":"INTERMEDIATE","description":null,"slug":"whats-new-in-nextjs-v18","views":0,"readTimeInMinutes":null}
[4/1/2025, 11:35:54 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:35:54 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:35:54 pm] [BaseService] Action: [Before getAll], Payload: null
[4/1/2025, 11:35:54 pm] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[4/1/2025, 11:36:15 pm] [BaseService] Action: [Before getBlogContentBySlug], Payload: "whats-new-in-nextjs-v18"
[4/1/2025, 11:36:15 pm] [BaseService] Action: [After getBlogContentBySlug], Payload: {"id":"2469138e-91e0-4d3b-8df8-776618e301a8","createdAt":"2025-01-04T18:06:09.028Z","updatedAt":"2025-01-04T18:06:09.028Z","fullContent":[{"id":"h1nodejs-a-js-runtime-environment-2","type":"heading-one","children":[{"text":"h1-nodejs- a js runtime environment 2"}]},{"id":"h2fs-module","type":"heading-two","children":[{"text":"h2-fs module"}]},{"id":"h3create-a-file-in-nextjs","type":"heading-three","children":[{"text":"h3-create a file in nextjs"}]},{"id":"h2os-module","type":"heading-two","children":[{"text":"h2-os module"}]},{"id":"h2multi-threading","type":"heading-two","children":[{"text":"h2-multi threading"}]},{"id":"h3why-multi-threading-is-important","type":"heading-three","children":[{"text":"h3-why multi threading is important"}]},{"type":"code-block","children":[{"type":"code-line","children":[{"text":"// you can now write your own blog"}]},{"type":"code-line","children":[{"text":"const initialValue = ["}]},{"type":"code-line","children":[{"text":"  {"}]},{"type":"code-line","children":[{"text":"    type: 'paragraph',"}]},{"type":"code-line","children":[{"text":"    children: [{ text: 'A line of text in a paragraph.' }]"}]},{"type":"code-line","children":[{"text":"  }"}]},{"type":"code-line","children":[{"text":"]"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"const App = () => {"}]},{"type":"code-line","children":[{"text":"  const [editor] = useState(() => withReact(createEditor()))"}]},{"type":"code-line","children":[{"text":""}]},{"type":"code-line","children":[{"text":"  return ("}]},{"type":"code-line","children":[{"text":"    <Slate editor={editor} initialValue={initialValue}>"}]},{"type":"code-line","children":[{"text":"      <Editable />"}]},{"type":"code-line","children":[{"text":"    </Slate>"}]},{"type":"code-line","children":[{"text":"  )"}]},{"type":"code-line","children":[{"text":"}"}]}],"language":"jsx"},{"type":"paragraph","children":[{"text":"This is editable "},{"bold":true,"text":"rich"},{"text":" text, "},{"text":"much","italic":true},{"text":" better than a "},{"code":true,"text":"<textarea>"},{"text":"!"}]},{"type":"paragraph","children":[{"text":"Since it's rich text, you can do things like turn a selection of text "},{"bold":true,"text":"bold"},{"text":", or add a semantically rendered block quote in the middle of the page, like this:"}]},{"type":"block-quote","children":[{"text":"A wise quote."}]},{"type":"paragraph","align":"center","children":[{"text":"Try it out for yourself!"}]}],"intro":null,"implementation":null,"advanced":null,"blogId":"2ccc2bfc-2bcf-4ee7-929e-a263f571d690"}
[5/1/2025, 1:10:04 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:10:07 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:10:12 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:10:12 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:12:24 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:12:24 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:12:25 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:12:25 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:12:31 am] [BaseService] Action: [Before delete], Payload: "2ccc2bfc-2bcf-4ee7-929e-a263f571d690"
[5/1/2025, 1:12:31 am] [BaseService] Action: [After delete], Payload: {"id":"2ccc2bfc-2bcf-4ee7-929e-a263f571d690","createdAt":"2025-01-04T18:06:02.027Z","updatedAt":"2025-01-04T18:06:02.027Z","topicId":"826f0fe0-8748-4bef-94dc-548782da6f37","authorId":"48942f89-e703-4a29-a621-0fc21456211b","title":"whats new in nextjs v18","skillLevel":"INTERMEDIATE","description":null,"slug":"whats-new-in-nextjs-v18","views":0,"readTimeInMinutes":null}
[5/1/2025, 1:12:43 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:12:43 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:12:43 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:12:43 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:12:48 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:12:48 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:12:48 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:12:48 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:12:50 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:12:50 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:12:50 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:12:50 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:14:11 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:14:11 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:14:11 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:14:11 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:14:12 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:14:12 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:14:12 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:14:12 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:14:36 am] [BaseService] Action: [Before delete], Payload: "fb18cae2-6cb6-4be9-9cd6-05f5a4409fbd"
[5/1/2025, 1:14:36 am] [BaseService] Action: [After delete], Payload: {"id":"fb18cae2-6cb6-4be9-9cd6-05f5a4409fbd","createdAt":"2025-01-04T19:44:26.329Z","updatedAt":"2025-01-04T19:44:26.329Z","topicId":"826f0fe0-8748-4bef-94dc-548782da6f37","authorId":"48942f89-e703-4a29-a621-0fc21456211b","title":"whats new in nextjs v19","skillLevel":"INTERMEDIATE","description":null,"slug":"whats-new-in-nextjs-v19","views":0,"readTimeInMinutes":null}
[5/1/2025, 1:14:45 am] [BaseService] Action: [Before delete], Payload: "1084a8ae-060d-4f5d-a387-02c99d81a99d"
[5/1/2025, 1:14:45 am] [BaseService] Action: [After delete], Payload: {"id":"1084a8ae-060d-4f5d-a387-02c99d81a99d","createdAt":"2025-01-04T19:42:57.407Z","updatedAt":"2025-01-04T19:42:57.407Z","topicId":"826f0fe0-8748-4bef-94dc-548782da6f37","authorId":"48942f89-e703-4a29-a621-0fc21456211b","title":"whats new in nextjs v18","skillLevel":"INTERMEDIATE","description":null,"slug":"whats-new-in-nextjs-v18","views":0,"readTimeInMinutes":null}
[5/1/2025, 1:14:51 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:14:51 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:14:51 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:14:51 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:15:53 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:15:53 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:15:53 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:15:53 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:27:15 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:27:15 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:27:16 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:27:16 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:27:16 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:27:16 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:27:16 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:27:16 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:47:41 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:47:42 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:47:42 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:47:42 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:47:42 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:47:42 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:47:43 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:47:43 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:47:52 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:47:52 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:47:52 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:47:52 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:47:53 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:47:53 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:51:12 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:51:12 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:51:13 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:51:13 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:53:19 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:53:19 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:53:20 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:53:20 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:53:32 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:53:32 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:53:32 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:53:32 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:54:53 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:54:53 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:54:54 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:54:54 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:55:25 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:55:25 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:55:25 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:55:26 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:58:19 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:58:19 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 1:58:19 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 1:58:19 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:01:22 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:01:22 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:01:22 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:01:22 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:11:32 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:11:34 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:11:34 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:11:34 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:13:49 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:13:53 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:20:39 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:20:39 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:20:45 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:20:45 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:20:47 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:20:47 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:30:42 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:30:45 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:30:49 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:30:49 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:30:52 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:30:52 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:31:05 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:31:06 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:31:08 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:31:08 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:37:13 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:37:13 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:37:14 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:37:14 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:37:22 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:37:22 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:37:23 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:37:23 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:40:36 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:40:36 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:40:37 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:40:37 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:40:52 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:40:52 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:40:54 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:40:54 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:41:51 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:41:51 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:41:52 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:41:52 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:42:18 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:42:18 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:42:19 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:42:19 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:44:22 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:44:27 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:44:29 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:44:29 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:49:15 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:49:18 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:49:19 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:49:19 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:49:36 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:49:36 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:49:38 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:49:38 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:50:05 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:50:06 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:50:06 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:50:06 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:50:54 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:50:55 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:50:56 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:50:57 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:52:38 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:52:43 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:52:44 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:52:44 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:53:14 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:53:24 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:53:31 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:53:32 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:53:33 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:53:33 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:53:48 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:53:49 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:53:59 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:53:59 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:54:13 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:54:15 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:54:21 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:54:22 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:54:28 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:54:28 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:54:29 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:54:29 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:55:16 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:55:16 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:55:19 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:55:19 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:55:31 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:55:32 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:55:33 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:55:33 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:56:07 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:56:09 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:56:10 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:56:10 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:56:44 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:56:45 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 2:56:45 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 2:56:45 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:13:20 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:13:21 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:13:22 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:13:22 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:13:33 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:13:33 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:13:34 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:13:34 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:13:40 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:13:40 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:13:41 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:13:41 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:14:03 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:14:04 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:14:05 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:14:05 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:15:04 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:15:04 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:15:06 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:15:06 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:16:08 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:16:08 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:16:10 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:16:10 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:16:23 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:16:23 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:16:23 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:16:23 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:17:32 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:17:32 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:17:33 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:17:33 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:18:03 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:18:04 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:18:06 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:18:06 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:20:01 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:20:01 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:20:03 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:20:03 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:20:32 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:20:33 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:20:34 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:20:34 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:21:20 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:21:20 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:21:21 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:21:21 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:24:33 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:24:33 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:24:34 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:24:34 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:25:18 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:25:18 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:25:21 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:25:21 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:26:01 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:26:04 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:26:05 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:26:05 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:26:41 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:26:43 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:26:46 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:26:46 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:26:53 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:26:53 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:27:01 am] [BaseService] Action: [Before delete], Payload: "39215ab0-8cb9-4494-a5a5-a84adb4e7684"
[5/1/2025, 3:27:02 am] [BaseService] Action: [After delete], Payload: {"id":"39215ab0-8cb9-4494-a5a5-a84adb4e7684","createdAt":"2025-01-04T20:18:03.415Z","updatedAt":"2025-01-04T20:18:03.415Z","topicId":"9565920f-2d52-4aa2-a98c-7e149edd3ad9","authorId":"48942f89-e703-4a29-a621-0fc21456211b","title":"whats new in nextjs v18","skillLevel":"INTERMEDIATE","description":null,"slug":"whats-new-in-nextjs-v18","views":0,"readTimeInMinutes":null}
[5/1/2025, 3:42:50 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:42:52 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:42:54 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:42:54 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:42:55 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:42:55 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:47:05 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:47:06 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:47:06 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:47:06 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:47:25 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:47:26 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:47:39 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:47:40 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:47:51 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:47:51 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:47:58 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:47:58 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:47:58 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:47:58 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:50:21 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:50:21 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:50:23 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:50:23 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:51:49 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:51:49 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:51:50 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:51:50 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:52:12 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:52:13 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:53:29 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:53:29 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:53:35 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:53:35 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:53:40 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:53:40 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:53:41 am] [BaseService] Action: [Before getAll], Payload: null
[5/1/2025, 3:53:42 am] [BaseService] Action: [After getAll], Payload: [{"id":"f2a289c5-5cbc-452a-a440-08b4628c6d45","createdAt":"2024-12-27T09:32:20.582Z","updatedAt":"2024-12-27T09:32:20.582Z","title":"Become a Frontend Developer"},{"id":"78d63fef-1cf3-4b2a-b2ee-c6c94e8c6010","createdAt":"2024-12-27T09:32:20.865Z","updatedAt":"2024-12-27T09:32:20.865Z","title":"Master Backend Development"}]
[5/1/2025, 3:54:57 am] [BaseService] Action: [Before delete], Payload: "0fb55a91-ad65-4409-89a2-2741faaab8d4"
[5/1/2025, 3:54:57 am] [BaseService] Action: [After delete], Payload: {"id":"0fb55a91-ad65-4409-89a2-2741faaab8d4","createdAt":"2025-01-04T22:23:58.643Z","updatedAt":"2025-01-04T22:23:58.643Z","topicId":"826f0fe0-8748-4bef-94dc-548782da6f37","authorId":"48942f89-e703-4a29-a621-0fc21456211b","title":"whats new in nextjs v18","skillLevel":"INTERMEDIATE","description":null,"slug":"whats-new-in-nextjs-v18","views":0,"readTimeInMinutes":null}
