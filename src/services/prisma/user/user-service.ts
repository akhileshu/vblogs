import type { Prisma, PrismaClient ,User } from "@prisma/client";
import { BaseService } from "./../base-service";

import { createUser } from "./create-user";
import { getUserById } from "./get-user-by-id";
import { updateUser } from "./update-user";
import { deleteUser } from "./delete-user";
import { getAllUsers } from "./get-all-users";
import { UpdateUserSchemaType } from "@/shared/types/models/user";

interface UserService {
  createUser(data: Prisma.UserCreateInput): Promise<User>;
  getUserById(id: string): Promise<User | null>;
  updateUser(data:UpdateUserSchemaType): Promise<User>;
  deleteUser(id: string): Promise<User>;
  getAllUsers(): Promise<User[]>;
}

export type UserServiceReturnType<T extends keyof UserService> = Awaited<
  ReturnType<UserService[T]>
>;

export class UserServiceImplementation extends BaseService implements UserService {
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async createUser(data: Prisma.UserCreateInput) {
    const result = await createUser(this.prisma, data);
    return result;
  }

  async getUserById(id: string) {
    const result = await getUserById(this.prisma, id);
    return result;
  }

  async updateUser(data: UpdateUserSchemaType) {
    const user=await this.getLoggedInAccount()
    const result = await updateUser(this.prisma, data,user.id);
    return result;
  }

  async deleteUser(id: string) {
    const result = await deleteUser(this.prisma, id);
    return result;
  }

  async getAllUsers() {
    const result = await getAllUsers(this.prisma);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to UserService
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to UserService
  }
}



