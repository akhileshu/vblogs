import type { Prisma, PrismaClient ,BlogReadHistory } from "@prisma/client";
import { BaseService } from "./../base-service";

import { createBlogReadHistory } from "./create-blog-read-history";
import { getBlogReadHistoryById } from "./get-blog-read-history-by-id";
import { updateBlogReadHistory } from "./update-blog-read-history";
import { deleteBlogReadHistory } from "./delete-blog-read-history";
import { getAllBlogReadHistorys } from "./get-all-blog-read-historys";

interface BlogReadHistoryService {
  createBlogReadHistory(data: Prisma.BlogReadHistoryCreateInput): Promise<BlogReadHistory>;
  getBlogReadHistoryById(id: string): Promise<BlogReadHistory | null>;
  updateBlogReadHistory(id: string, data: Prisma.BlogReadHistoryUpdateInput): Promise<BlogReadHistory>;
  deleteBlogReadHistory(id: string): Promise<BlogReadHistory>;
  getAllBlogReadHistorys(): Promise<BlogReadHistory[]>;
}

export type BlogReadHistoryServiceReturnType<T extends keyof BlogReadHistoryService> = Awaited<
  ReturnType<BlogReadHistoryService[T]>
>;

export class BlogReadHistoryServiceImplementation extends BaseService implements BlogReadHistoryService {
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async createBlogReadHistory(data: Prisma.BlogReadHistoryCreateInput) {
    const result = await createBlogReadHistory(this.prisma, data);
    return result;
  }

  async getBlogReadHistoryById(id: string) {
    const result = await getBlogReadHistoryById(this.prisma, id);
    return result;
  }

  async updateBlogReadHistory(id: string, data: Prisma.BlogReadHistoryUpdateInput) {
    const result = await updateBlogReadHistory(this.prisma, id, data);
    return result;
  }

  async deleteBlogReadHistory(id: string) {
    const result = await deleteBlogReadHistory(this.prisma, id);
    return result;
  }

  async getAllBlogReadHistorys() {
    const result = await getAllBlogReadHistorys(this.prisma);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to BlogReadHistoryService
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to BlogReadHistoryService
  }
}



