import type { Prisma, PrismaClient ,BlogBookmarkList } from "@prisma/client";
import { BaseService } from "./../base-service";

import { createBlogBookmarkList } from "./create-blog-bookmark-list";
import { getBlogBookmarkListById } from "./get-blog-bookmark-list-by-id";
import { updateBlogBookmarkList } from "./update-blog-bookmark-list";
import { deleteBlogBookmarkList } from "./delete-blog-bookmark-list";
import { getAllBlogBookmarkLists } from "./get-all-blog-bookmark-lists";

interface BlogBookmarkListService {
  createBlogBookmarkList(data: Prisma.BlogBookmarkListCreateInput): Promise<BlogBookmarkList>;
  getBlogBookmarkListById(id: string): Promise<BlogBookmarkList | null>;
  updateBlogBookmarkList(id: string, data: Prisma.BlogBookmarkListUpdateInput): Promise<BlogBookmarkList>;
  deleteBlogBookmarkList(id: string): Promise<BlogBookmarkList>;
  getAllBlogBookmarkLists(): Promise<BlogBookmarkList[]>;
}

export type BlogBookmarkListServiceReturnType<T extends keyof BlogBookmarkListService> = Awaited<
  ReturnType<BlogBookmarkListService[T]>
>;

export class BlogBookmarkListServiceImplementation extends BaseService implements BlogBookmarkListService {
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async createBlogBookmarkList(data: Prisma.BlogBookmarkListCreateInput) {
    const result = await createBlogBookmarkList(this.prisma, data);
    return result;
  }

  async getBlogBookmarkListById(id: string) {
    const result = await getBlogBookmarkListById(this.prisma, id);
    return result;
  }

  async updateBlogBookmarkList(id: string, data: Prisma.BlogBookmarkListUpdateInput) {
    const result = await updateBlogBookmarkList(this.prisma, id, data);
    return result;
  }

  async deleteBlogBookmarkList(id: string) {
    const result = await deleteBlogBookmarkList(this.prisma, id);
    return result;
  }

  async getAllBlogBookmarkLists() {
    const result = await getAllBlogBookmarkLists(this.prisma);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to BlogBookmarkListService
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to BlogBookmarkListService
  }
}



