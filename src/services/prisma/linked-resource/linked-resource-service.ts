import type { Prisma, PrismaClient ,LinkedResource } from "@prisma/client";
import { BaseService } from "./../base-service";

import { createLinkedResource } from "./create-linked-resource";
import { getLinkedResourceById } from "./get-linked-resource-by-id";
import { updateLinkedResource } from "./update-linked-resource";
import { deleteLinkedResource } from "./delete-linked-resource";
import { getAllLinkedResources } from "./get-all-linked-resources";

interface LinkedResourceService {
  createLinkedResource(data: Prisma.LinkedResourceCreateInput): Promise<LinkedResource>;
  getLinkedResourceById(id: string): Promise<LinkedResource | null>;
  updateLinkedResource(id: string, data: Prisma.LinkedResourceUpdateInput): Promise<LinkedResource>;
  deleteLinkedResource(id: string): Promise<LinkedResource>;
  getAllLinkedResources(): Promise<LinkedResource[]>;
}

export type LinkedResourceServiceReturnType<T extends keyof LinkedResourceService> = Awaited<
  ReturnType<LinkedResourceService[T]>
>;

export class LinkedResourceServiceImplementation extends BaseService implements LinkedResourceService {
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async createLinkedResource(data: Prisma.LinkedResourceCreateInput) {
    const result = await createLinkedResource(this.prisma, data);
    return result;
  }

  async getLinkedResourceById(id: string) {
    const result = await getLinkedResourceById(this.prisma, id);
    return result;
  }

  async updateLinkedResource(id: string, data: Prisma.LinkedResourceUpdateInput) {
    const result = await updateLinkedResource(this.prisma, id, data);
    return result;
  }

  async deleteLinkedResource(id: string) {
    const result = await deleteLinkedResource(this.prisma, id);
    return result;
  }

  async getAllLinkedResources() {
    const result = await getAllLinkedResources(this.prisma);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to LinkedResourceService
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to LinkedResourceService
  }
}



