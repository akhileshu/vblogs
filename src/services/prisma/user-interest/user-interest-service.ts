import type {
  Prisma,
  PrismaClient,
  Technology,
  Topic,
  UserInterest,
} from "@prisma/client";
import { BaseService } from "./../base-service";

import { createUserInterest } from "./create-user-interest";
import { getUserInterestById } from "./get-user-interest-by-id";
import { updateUserInterest } from "./update-user-interest";
import { deleteUserInterest } from "./delete-user-interest";
import { getAllUserInterests } from "./get-all-user-interests";
import { CreateUserInterestSchemaType } from "@/shared/types/models/user-interest";
import { getLoggedInUserInterests } from "./get-logged-in-user-interests";

interface UserInterestService {
  createUserInterest(data: CreateUserInterestSchemaType): Promise<{
    message: string;
  }>;
  getUserInterestById(id: string): Promise<UserInterest | null>;
  updateUserInterest(
    id: string,
    data: Prisma.UserInterestUpdateInput
  ): Promise<UserInterest>;
  deleteUserInterest(id: string): Promise<UserInterest>;
  getAllUserInterests(): Promise<UserInterest[]>;
  //todo : note this , type for - included fields
  getLoggedInUserInterests(): Promise<
    ({
      technology: Technology | null;
      topic: Topic | null;
    } & UserInterest)[]
  >;
}

export type UserInterestServiceReturnType<T extends keyof UserInterestService> =
  Awaited<ReturnType<UserInterestService[T]>>;

export class UserInterestServiceImplementation
  extends BaseService
  implements UserInterestService
{
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async createUserInterest(data: CreateUserInterestSchemaType) {
    const user = await this.getLoggedInAccount();
    const result = await createUserInterest(this.prisma, data, user.id);
    return result;
  }

  async getUserInterestById(id: string) {
    const result = await getUserInterestById(this.prisma, id);
    return result;
  }

  async updateUserInterest(id: string, data: Prisma.UserInterestUpdateInput) {
    const result = await updateUserInterest(this.prisma, id, data);
    return result;
  }

  async deleteUserInterest(id: string) {
    const result = await deleteUserInterest(this.prisma, id);
    return result;
  }

  async getAllUserInterests() {
    const result = await getAllUserInterests(this.prisma);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  async getLoggedInUserInterests() {
    //todo : might consider seperate for topic and technologies
    const user = await this.getLoggedInAccount();
    const result = await getLoggedInUserInterests(this.prisma, user.id);
    return result;
  }

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to UserInterestService
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to UserInterestService
  }
}
