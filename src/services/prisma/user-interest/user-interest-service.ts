import type { Prisma, PrismaClient ,UserInterest } from "@prisma/client";
import { BaseService } from "./../base-service";

import { createUserInterest } from "./create-user-interest";
import { getUserInterestById } from "./get-user-interest-by-id";
import { updateUserInterest } from "./update-user-interest";
import { deleteUserInterest } from "./delete-user-interest";
import { getAllUserInterests } from "./get-all-user-interests";

interface UserInterestService {
  createUserInterest(data: Prisma.UserInterestCreateInput): Promise<UserInterest>;
  getUserInterestById(id: string): Promise<UserInterest | null>;
  updateUserInterest(id: string, data: Prisma.UserInterestUpdateInput): Promise<UserInterest>;
  deleteUserInterest(id: string): Promise<UserInterest>;
  getAllUserInterests(): Promise<UserInterest[]>;
}

export type UserInterestServiceReturnType<T extends keyof UserInterestService> = Awaited<
  ReturnType<UserInterestService[T]>
>;

export class UserInterestServiceImplementation extends BaseService implements UserInterestService {
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async createUserInterest(data: Prisma.UserInterestCreateInput) {
    await this.beforeAction("createUserInterest", data);
    const result = await createUserInterest(this.prisma, data);
    await this.afterAction("reateUserInterest", result);
    return result;
  }

  async getUserInterestById(id: string) {
    await this.beforeAction("getUserInterestById", id);
    const result = await getUserInterestById(this.prisma, id);
    await this.afterAction("getUserInterestById", result);
    return result;
  }

  async updateUserInterest(id: string, data: Prisma.UserInterestUpdateInput) {
    await this.beforeAction("updateUserInterest", { id, data });
    const result = await updateUserInterest(this.prisma, id, data);
    await this.afterAction("updateUserInterest", result);
    return result;
  }

  async deleteUserInterest(id: string) {
    await this.beforeAction("deleteUserInterest", id);
    const result = await deleteUserInterest(this.prisma, id);
    await this.afterAction("deleteUserInterest", result);
    return result;
  }

  async getAllUserInterests() {
    await this.beforeAction("getAllUserInterests", null);
    const result = await getAllUserInterests(this.prisma);
    await this.afterAction("getAllUserInterests", result);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to UserInterestService
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to UserInterestService
  }
}



