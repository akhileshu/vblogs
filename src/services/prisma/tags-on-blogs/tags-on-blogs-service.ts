import type { Prisma, PrismaClient ,TagsOnBlogs } from "@prisma/client";
import { BaseService } from "./../base-service";

import { createTagsOnBlogs } from "./create-tags-on-blogs";
import { getTagsOnBlogsById } from "./get-tags-on-blogs-by-id";
import { updateTagsOnBlogs } from "./update-tags-on-blogs";
import { deleteTagsOnBlogs } from "./delete-tags-on-blogs";
import { getAllTagsOnBlogss } from "./get-all-tags-on-blogss";

interface TagsOnBlogsService {
  createTagsOnBlogs(data: Prisma.TagsOnBlogsCreateInput): Promise<TagsOnBlogs>;
  getTagsOnBlogsById(id: string): Promise<TagsOnBlogs | null>;
  updateTagsOnBlogs(id: string, data: Prisma.TagsOnBlogsUpdateInput): Promise<TagsOnBlogs>;
  deleteTagsOnBlogs(id: string): Promise<TagsOnBlogs>;
  getAllTagsOnBlogss(): Promise<TagsOnBlogs[]>;
}

export type TagsOnBlogsServiceReturnType<T extends keyof TagsOnBlogsService> = Awaited<
  ReturnType<TagsOnBlogsService[T]>
>;

export class TagsOnBlogsServiceImplementation extends BaseService implements TagsOnBlogsService {
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async createTagsOnBlogs(data: Prisma.TagsOnBlogsCreateInput) {
    await this.beforeAction("createTagsOnBlogs", data);
    const result = await createTagsOnBlogs(this.prisma, data);
    await this.afterAction("reateTagsOnBlogs", result);
    return result;
  }

  async getTagsOnBlogsById(id: string) {
    await this.beforeAction("getTagsOnBlogsById", id);
    const result = await getTagsOnBlogsById(this.prisma, id);
    await this.afterAction("getTagsOnBlogsById", result);
    return result;
  }

  async updateTagsOnBlogs(id: string, data: Prisma.TagsOnBlogsUpdateInput) {
    await this.beforeAction("updateTagsOnBlogs", { id, data });
    const result = await updateTagsOnBlogs(this.prisma, id, data);
    await this.afterAction("updateTagsOnBlogs", result);
    return result;
  }

  async deleteTagsOnBlogs(id: string) {
    await this.beforeAction("deleteTagsOnBlogs", id);
    const result = await deleteTagsOnBlogs(this.prisma, id);
    await this.afterAction("deleteTagsOnBlogs", result);
    return result;
  }

  async getAllTagsOnBlogss() {
    await this.beforeAction("getAllTagsOnBlogss", null);
    const result = await getAllTagsOnBlogss(this.prisma);
    await this.afterAction("getAllTagsOnBlogss", result);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to TagsOnBlogsService
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to TagsOnBlogsService
  }
}



