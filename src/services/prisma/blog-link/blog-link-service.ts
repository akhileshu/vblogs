import type { Prisma, PrismaClient ,BlogLink } from "@prisma/client";
import { BaseService } from "./../base-service";

import { createBlogLink } from "./create-blog-link";
import { getBlogLinkById } from "./get-blog-link-by-id";
import { updateBlogLink } from "./update-blog-link";
import { deleteBlogLink } from "./delete-blog-link";
import { getAllBlogLinks } from "./get-all-blog-links";

interface BlogLinkService {
  createBlogLink(data: Prisma.BlogLinkCreateInput): Promise<BlogLink>;
  getBlogLinkById(id: string): Promise<BlogLink | null>;
  updateBlogLink(id: string, data: Prisma.BlogLinkUpdateInput): Promise<BlogLink>;
  deleteBlogLink(id: string): Promise<BlogLink>;
  getAllBlogLinks(): Promise<BlogLink[]>;
}

export type BlogLinkServiceReturnType<T extends keyof BlogLinkService> = Awaited<
  ReturnType<BlogLinkService[T]>
>;

export class BlogLinkServiceImplementation extends BaseService implements BlogLinkService {
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async createBlogLink(data: Prisma.BlogLinkCreateInput) {
    await this.beforeAction("createBlogLink", data);
    const result = await createBlogLink(this.prisma, data);
    await this.afterAction("reateBlogLink", result);
    return result;
  }

  async getBlogLinkById(id: string) {
    await this.beforeAction("getBlogLinkById", id);
    const result = await getBlogLinkById(this.prisma, id);
    await this.afterAction("getBlogLinkById", result);
    return result;
  }

  async updateBlogLink(id: string, data: Prisma.BlogLinkUpdateInput) {
    await this.beforeAction("updateBlogLink", { id, data });
    const result = await updateBlogLink(this.prisma, id, data);
    await this.afterAction("updateBlogLink", result);
    return result;
  }

  async deleteBlogLink(id: string) {
    await this.beforeAction("deleteBlogLink", id);
    const result = await deleteBlogLink(this.prisma, id);
    await this.afterAction("deleteBlogLink", result);
    return result;
  }

  async getAllBlogLinks() {
    await this.beforeAction("getAllBlogLinks", null);
    const result = await getAllBlogLinks(this.prisma);
    await this.afterAction("getAllBlogLinks", result);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to BlogLinkService
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to BlogLinkService
  }
}



