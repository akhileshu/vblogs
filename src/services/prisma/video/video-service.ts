import type { Prisma, PrismaClient ,Video } from "@prisma/client";
import { BaseService } from "./../base-service";

import { createVideo } from "./create-video";
import { getVideoById } from "./get-video-by-id";
import { updateVideo } from "./update-video";
import { deleteVideo } from "./delete-video";
import { getAllVideos } from "./get-all-videos";

interface VideoService {
  createVideo(data: Prisma.VideoCreateInput): Promise<Video>;
  getVideoById(id: string): Promise<Video | null>;
  updateVideo(id: string, data: Prisma.VideoUpdateInput): Promise<Video>;
  deleteVideo(id: string): Promise<Video>;
  getAllVideos(): Promise<Video[]>;
}

export type VideoServiceReturnType<T extends keyof VideoService> = Awaited<
  ReturnType<VideoService[T]>
>;

export class VideoServiceImplementation extends BaseService implements VideoService {
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async createVideo(data: Prisma.VideoCreateInput) {
    const result = await createVideo(this.prisma, data);
    return result;
  }

  async getVideoById(id: string) {
    const result = await getVideoById(this.prisma, id);
    return result;
  }

  async updateVideo(id: string, data: Prisma.VideoUpdateInput) {
    const result = await updateVideo(this.prisma, id, data);
    return result;
  }

  async deleteVideo(id: string) {
    const result = await deleteVideo(this.prisma, id);
    return result;
  }

  async getAllVideos() {
    const result = await getAllVideos(this.prisma);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to VideoService
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to VideoService
  }
}



