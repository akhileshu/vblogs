import type { Prisma, PrismaClient ,VideoSection } from "@prisma/client";
import { BaseService } from "./../base-service";

import { createVideoSection } from "./create-video-section";
import { getVideoSectionById } from "./get-video-section-by-id";
import { updateVideoSection } from "./update-video-section";
import { deleteVideoSection } from "./delete-video-section";
import { getAllVideoSections } from "./get-all-video-sections";

interface VideoSectionService {
  createVideoSection(data: Prisma.VideoSectionCreateInput): Promise<VideoSection>;
  getVideoSectionById(id: string): Promise<VideoSection | null>;
  updateVideoSection(id: string, data: Prisma.VideoSectionUpdateInput): Promise<VideoSection>;
  deleteVideoSection(id: string): Promise<VideoSection>;
  getAllVideoSections(): Promise<VideoSection[]>;
}

export type VideoSectionServiceReturnType<T extends keyof VideoSectionService> = Awaited<
  ReturnType<VideoSectionService[T]>
>;

export class VideoSectionServiceImplementation extends BaseService implements VideoSectionService {
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async createVideoSection(data: Prisma.VideoSectionCreateInput) {
    await this.beforeAction("createVideoSection", data);
    const result = await createVideoSection(this.prisma, data);
    await this.afterAction("reateVideoSection", result);
    return result;
  }

  async getVideoSectionById(id: string) {
    await this.beforeAction("getVideoSectionById", id);
    const result = await getVideoSectionById(this.prisma, id);
    await this.afterAction("getVideoSectionById", result);
    return result;
  }

  async updateVideoSection(id: string, data: Prisma.VideoSectionUpdateInput) {
    await this.beforeAction("updateVideoSection", { id, data });
    const result = await updateVideoSection(this.prisma, id, data);
    await this.afterAction("updateVideoSection", result);
    return result;
  }

  async deleteVideoSection(id: string) {
    await this.beforeAction("deleteVideoSection", id);
    const result = await deleteVideoSection(this.prisma, id);
    await this.afterAction("deleteVideoSection", result);
    return result;
  }

  async getAllVideoSections() {
    await this.beforeAction("getAllVideoSections", null);
    const result = await getAllVideoSections(this.prisma);
    await this.afterAction("getAllVideoSections", result);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to VideoSectionService
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to VideoSectionService
  }
}



