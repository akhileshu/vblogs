import type { Prisma, PrismaClient ,BlogPlaylist } from "@prisma/client";
import { BaseService } from "./../base-service";

import { createBlogPlaylist } from "./create-blog-playlist";
import { getBlogPlaylistById } from "./get-blog-playlist-by-id";
import { updateBlogPlaylist } from "./update-blog-playlist";
import { deleteBlogPlaylist } from "./delete-blog-playlist";
import { getAllBlogPlaylists } from "./get-all-blog-playlists";

interface BlogPlaylistService {
  createBlogPlaylist(data: Prisma.BlogPlaylistCreateInput): Promise<BlogPlaylist>;
  getBlogPlaylistById(id: string): Promise<BlogPlaylist | null>;
  updateBlogPlaylist(id: string, data: Prisma.BlogPlaylistUpdateInput): Promise<BlogPlaylist>;
  deleteBlogPlaylist(id: string): Promise<BlogPlaylist>;
  getAllBlogPlaylists(): Promise<BlogPlaylist[]>;
}

export type BlogPlaylistServiceReturnType<T extends keyof BlogPlaylistService> = Awaited<
  ReturnType<BlogPlaylistService[T]>
>;

export class BlogPlaylistServiceImplementation extends BaseService implements BlogPlaylistService {
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async createBlogPlaylist(data: Prisma.BlogPlaylistCreateInput) {
    await this.beforeAction("createBlogPlaylist", data);
    const result = await createBlogPlaylist(this.prisma, data);
    await this.afterAction("reateBlogPlaylist", result);
    return result;
  }

  async getBlogPlaylistById(id: string) {
    await this.beforeAction("getBlogPlaylistById", id);
    const result = await getBlogPlaylistById(this.prisma, id);
    await this.afterAction("getBlogPlaylistById", result);
    return result;
  }

  async updateBlogPlaylist(id: string, data: Prisma.BlogPlaylistUpdateInput) {
    await this.beforeAction("updateBlogPlaylist", { id, data });
    const result = await updateBlogPlaylist(this.prisma, id, data);
    await this.afterAction("updateBlogPlaylist", result);
    return result;
  }

  async deleteBlogPlaylist(id: string) {
    await this.beforeAction("deleteBlogPlaylist", id);
    const result = await deleteBlogPlaylist(this.prisma, id);
    await this.afterAction("deleteBlogPlaylist", result);
    return result;
  }

  async getAllBlogPlaylists() {
    await this.beforeAction("getAllBlogPlaylists", null);
    const result = await getAllBlogPlaylists(this.prisma);
    await this.afterAction("getAllBlogPlaylists", result);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to BlogPlaylistService
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to BlogPlaylistService
  }
}



