import type { Prisma, PrismaClient ,BlogPlaylistItem } from "@prisma/client";
import { BaseService } from "./../base-service";

import { createBlogPlaylistItem } from "./create-blog-playlist-item";
import { getBlogPlaylistItemById } from "./get-blog-playlist-item-by-id";
import { updateBlogPlaylistItem } from "./update-blog-playlist-item";
import { deleteBlogPlaylistItem } from "./delete-blog-playlist-item";
import { getAllBlogPlaylistItems } from "./get-all-blog-playlist-items";

interface BlogPlaylistItemService {
  createBlogPlaylistItem(data: Prisma.BlogPlaylistItemCreateInput): Promise<BlogPlaylistItem>;
  getBlogPlaylistItemById(id: string): Promise<BlogPlaylistItem | null>;
  updateBlogPlaylistItem(id: string, data: Prisma.BlogPlaylistItemUpdateInput): Promise<BlogPlaylistItem>;
  deleteBlogPlaylistItem(id: string): Promise<BlogPlaylistItem>;
  getAllBlogPlaylistItems(): Promise<BlogPlaylistItem[]>;
}

export type BlogPlaylistItemServiceReturnType<T extends keyof BlogPlaylistItemService> = Awaited<
  ReturnType<BlogPlaylistItemService[T]>
>;

export class BlogPlaylistItemServiceImplementation extends BaseService implements BlogPlaylistItemService {
  constructor(prisma: PrismaClient) {
    super(prisma);
  }

  async createBlogPlaylistItem(data: Prisma.BlogPlaylistItemCreateInput) {
    const result = await createBlogPlaylistItem(this.prisma, data);
    return result;
  }

  async getBlogPlaylistItemById(id: string) {
    const result = await getBlogPlaylistItemById(this.prisma, id);
    return result;
  }

  async updateBlogPlaylistItem(id: string, data: Prisma.BlogPlaylistItemUpdateInput) {
    const result = await updateBlogPlaylistItem(this.prisma, id, data);
    return result;
  }

  async deleteBlogPlaylistItem(id: string) {
    const result = await deleteBlogPlaylistItem(this.prisma, id);
    return result;
  }

  async getAllBlogPlaylistItems() {
    const result = await getAllBlogPlaylistItems(this.prisma);
    return result;
  }

  // <AUTO-GENERATED METHODS>

  protected async beforeAction(action: string, data: unknown) {
    super.beforeAction(action, data);
    // Custom logic specific to BlogPlaylistItemService
  }

  protected async afterAction(action: string, result: unknown) {
    super.afterAction(action, result);
    // Custom logic specific to BlogPlaylistItemService
  }
}



